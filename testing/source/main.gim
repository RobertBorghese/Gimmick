
import alt


start namespace dfsfds
var blafdfdsfd = 43434
@sortMembersAlphabetically
class Fuck:
	var vwref = 666
	static aa = 32
	var fds = "fdsf"
	var bb = 123

	static def bla -> int:
		return aa

	def ccc -> int:
		return 0

	def bla2 -> int:
		return 0

var ffff = 2323232
end namespace

extern class Test:
	var bla: int

inline def bla:
	var ffdfdf = 32

compiler attribute myAttribute(someInput: string, bla: string list):
	def toCpp -> string:
		someInput = bla[0];
		###if someInput.length() == 3:
			return "got something"
		else:
			return "got nothing"###
		return "test"

@myAttribute("fjdkl", ["dsa"]);

var a = 32

@if(js == false) var b = bla2;

@untyped scope:
	d.df = 43
	if bfkld:
		print("FUDFKDL")

scope:
	if a == 32:
		a++

if a == 32:
	@untyped b::gf++

print("fd")

var fds: int ptr list

var fdsd = "fdsklfds"
var dsdsds: string = fdsd
var help = "";

var qwer = help

var aaa = 111.floor.floor

if 21 == 21:
	print("fds")

print(12.toString());

var blabla = ""
@if(js) blabla = "fds";
@elseif(js) blabla = "broken"
@else scope:
	blabla = "gfd"
	blabla = "success!"


print("bla");

print("bla23");

var grge = dfsfds.ffff

get test2 -> int:
set test2(bla: int):

def test1() -> int:

#def test() -> int:

def test(test: int) -> int?:

def test(test2: long?) -> int?:

def test(test3: long):

def test(test5: float):

#def test(test: string):

test(null)

var __ttgdf = test2


#modify string:
#	def bbb -> int:
#		return length

#var pop = "fjdsklfkds".bbb()

test(43f);

class MyTestClass:
	var unqiue

	init(fd: int):
		unqiue = 32

	destroy:
		print("fjdklfds")

scope:
	var onetwo = 12
	scope:
		var twothree = onetwo + 32
